{"version":3,"sources":["components/TodoList/TodoList.tsx","api.js","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["FilterType","TodoList","state","inputQuery","filterQuery","All","handleChange","event","target","name","value","setState","getVisibleList","todos","props","Active","filter","todo","title","toLowerCase","includes","completed","Completed","this","visibleTodos","className","onSubmit","preventDefault","placeholder","type","onChange","map","classNames","checked","readOnly","onClick","updateUserId","userId","id","React","Component","API_URL","getUser","fetch","then","response","ok","json","Promise","reject","CurrentUser","user","updateUser","a","selectedUserId","prevProps","email","phone","resetUserId","App","errorMessage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa8cf3b3.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ninterface Props {\n  todos: Todo[];\n  updateUserId: (id: number) => void;\n}\n\ninterface State {\n  inputQuery: string;\n  filterQuery: FilterType;\n}\n\nenum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    inputQuery: '',\n    filterQuery: FilterType.All,\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    } as Pick<State, keyof State>);\n  };\n\n  getVisibleList = () => {\n    const { inputQuery, filterQuery } = this.state;\n    const { todos } = this.props;\n\n    if (filterQuery === FilterType.Active) {\n      return todos.filter(todo => (\n        todo.title\n        && (todo.title.toLowerCase().includes(inputQuery) && !todo.completed)\n      ));\n    }\n\n    if (filterQuery === FilterType.Completed) {\n      return todos.filter(todo => (\n        todo.title\n        && (todo.title.toLowerCase().includes(inputQuery) && todo.completed)\n      ));\n    }\n\n    return todos.filter(todo => (\n      todo.title && todo.title.toLowerCase().includes(inputQuery)\n    ));\n  };\n\n  render() {\n    const { inputQuery, filterQuery } = this.state;\n\n    const visibleTodos = this.getVisibleList();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <form\n          className=\"text-center\"\n          onSubmit={event => {\n            event.preventDefault();\n          }}\n        >\n          <input\n            className=\"mb-2 border border-secondary rounded\"\n            placeholder=\"Provide title\"\n            type=\"text\"\n            name=\"inputQuery\"\n            value={inputQuery}\n            onChange={this.handleChange}\n          />\n\n          <select\n            className=\"mb-2 ms-2 border border-secondary rounded\"\n            name=\"filterQuery\"\n            value={filterQuery}\n            onChange={this.handleChange}\n          >\n            <option\n              value={FilterType.All}\n            >\n              All\n            </option>\n\n            <option\n              value={FilterType.Active}\n            >\n              Active\n            </option>\n\n            <option\n              value={FilterType.Completed}\n            >\n              Completed\n            </option>\n          </select>\n        </form>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(todo => (\n              <li\n                className={classNames('TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n                  type=\"button\"\n                  onClick={() => {\n                    this.props.updateUserId(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","/* eslint-disable prefer-promise-reject-errors */\nconst API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = () => {\n  return fetch(`${API_URL}/todos`)\n    .then(response => (response.ok\n      ? response.json()\n      : Promise.reject('Cannot process the request')\n    ));\n};\n\nexport const getUser = (id) => {\n  return fetch(`${API_URL}/users/${id}`)\n    .then(response => (response.ok\n      ? response.json()\n      : Promise.reject('Cannot process the request')));\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\ninterface Props {\n  selectedUserId: number,\n  resetUserId: () => void;\n}\n\ninterface State {\n  user: User | null;\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    this.updateUser();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.updateUser();\n    }\n  }\n\n  updateUser = async () => {\n    const user = await getUser(this.props.selectedUserId);\n\n    this.setState({ user });\n  };\n\n  render() {\n    const { selectedUserId } = this.props;\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <div>\n          No user found\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser d-flex flex-column\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {'Selected user: '}\n            {selectedUserId}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          type=\"submit\"\n          className=\"border rounded bg-primary mx-auto py-2 text-light w-50\"\n          onClick={this.props.resetUserId}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  errorMessage: string;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    errorMessage: '',\n  };\n\n  async componentDidMount() {\n    try {\n      const todos = await getTodos();\n\n      this.setState({ todos });\n    } catch (error) {\n      this.setState({ errorMessage: 'Please wait' });\n    }\n  }\n\n  updateUserId = (id: number) => {\n    this.setState({ selectedUserId: id });\n  };\n\n  resetUserId = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId, todos, errorMessage } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {!errorMessage ? (\n            <TodoList\n              todos={todos}\n              updateUserId={this.updateUserId}\n            />\n          )\n            : (\n              { errorMessage }\n            )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                resetUserId={this.resetUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}